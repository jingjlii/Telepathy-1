trigger:
- dev-integration

pr:
- dev-integration

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'fdcc5225-3a32-4448-bfb1-61a524dbe2a1'
  containerRegistry: 'telerepo.azurecr.io'
  dispatcherDockerfile: 'dispatcher/Dockerfile'
  sessionDockerfile: 'Dockerfile.session'
  frontendDockerfile: 'Dockerfile.frontend'

  armTemplateUri: 'https://raw.githubusercontent.com/jingjlii/Telepathy-1/dev-integration/deploy/azuredeploy.basic.json'
  resourceGroupName: 'haiguoteletest'
  aksClusterName: 'telepathyakscluster'
  redisCacheName: 'telepathyrediscache'
  batchAccountName: 'telepathypipelinebatch'
  batchPoolName: 'telepathypipelinebatchpool'
  storageAccountName: 'telepathystorage'
  
  # vault for secret storage
  keyVaultName: 'haiguopipelinevault'
  
  vmImageName: 'ubuntu-latest'

stages:

- stage: BuildImages
  displayName: Build Images
  jobs:
  - job: buildDispatcher
    displayName: Build dispatcher image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push dispatcher image to ACR
      inputs:
        command: buildAndPush
        repository: telepathydispatcher
        dockerfile: $(dispatcherDockerfile)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(Build.BuildId)
          latest
  
  - job: buildSession
    displayName: Build session image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push session image to ACR
      inputs:
        command: buildAndPush
        repository: telepathysession
        dockerfile: $(sessionDockerfile)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(Build.BuildId)
          latest

  - job: buildFrontend
    displayName: Build frontend image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push frontend image to ACR
      inputs:
        command: buildAndPush
        repository: telepathyfrontend
        dockerfile: $(frontendDockerfile)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(Build.BuildId)
          latest

- stage: DeployResources
  displayName: ARM Deployment
  # Enable parallel stages
  dependsOn: []

  jobs:
  - job: ARMDeployment
    displayName: Deploy ARM resources
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: AzureKeyVault@1
        inputs:
          azureSubscription: 'Subscription-1(a486e243-747b-42de-8c4c-379f8295a746)'
          KeyVaultName: '$(keyVaultName)'
          SecretsFilter: '*'
          RunAsPreJob: true

      - task: AzureResourceManagerTemplateDeployment@3
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Subscription-1(a486e243-747b-42de-8c4c-379f8295a746)'
          subscriptionId: 'a486e243-747b-42de-8c4c-379f8295a746'
          action: 'Create Or Update Resource Group'
          resourceGroupName: '$(resourceGroupName)'
          location: 'East US'
          templateLocation: 'URL of the file'
          csmFileLink: '$(armTemplateUri)'
          overrideParameters: >
            -SSHPublicKey "$(SshPublicKey)"
            -servicePrincipalClientId "$(aksSpAppId)"
            -servicePrincipalClientSecret "$(aksSpSecret)"
            -telepathyAKSName "$(aksClusterName)"
            -telepathyRedisCacheName "$(redisCacheName)"
            -batchAccountsName "$(batchAccountName)"
            -batchAccountsPoolName "$(batchPoolName)"
            -telepathyStorageName "$(storageAccountName)"
          deploymentMode: 'Incremental'

- stage: DeployApplications
  displayName: AKS Deployment
  dependsOn:
    - BuildImages
    - DeployResources

  jobs:       
  - job: deployContainer
    displayName: Deploy to AKS
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: AzurePowerShell@5
        inputs:
          azureSubscription: 'Subscription-1(a486e243-747b-42de-8c4c-379f8295a746)'
          ScriptType: 'FilePath'
          ScriptPath: '$(Build.SourcesDirectory)/deploy/scripts/deploy2aks_pipeline.ps1'
          ScriptArguments: >
            -sourcesDirectory "$(Build.SourcesDirectory)"
            -resourceGroup "$(resourceGroupName)"
            -aksClusterName "$(aksClusterName)"
            -redisCacheName "$(redisCacheName)"
            -batchAccountName "$(batchAccountName)"
            -batchPoolName "$(batchPoolName)"
            -storageAccountName "$(storageAccountName)"
          pwsh: true
          azurePowerShellVersion: 'LatestVersion'



